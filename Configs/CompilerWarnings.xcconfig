//
//  CompileWarnings.xcconfig
//  
//
//  Created by Томенко Андрей on 10/5/13.
//
//

WARNING_CFLAGS = -Wall

// Apple LLVM - warnings - all languages
GCC_WARN_CHECK_SWITCH_STATEMENTS						= YES		// Warn whenever a switch statement has an index of enumeral type and lacks a case for one or more of the named codes of that enumeration.  The presence of a default label prevents this warning.  Case labels outside the enumeration range also provoke warnings when this option is used.  [GCC_WARN_CHECK_SWITCH_STATEMENTS, -Wswitch]
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS						= YES		// Warn about the use of deprecated functions, variables, and types (as indicated by the 'deprecated' attribute).  [GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS, -Wno-deprecated-declarations]
CLANG_WARN_DIRECT_OBJC_ISA_USAGE						= YES_ERROR // Warn about direct accesses to the Objective-C 'isa' pointer instead of using a runtime API. [CLANG_WARN_DIRECT_OBJC_ISA_USAGE, -Wdeprecated-objc-isa-usage]
CLANG_WARN_DOCUMENTATION_COMMENTS						= YES		// Warns about issues in documentation comments (doxygen-style) such as missing or incorrect documentation tags.  [CLANG_WARN_DOCUMENTATION_COMMENTS, -Wdocumentation]
CLANG_WARN_EMPTY_BODY									= YES		// Warn about loop bodies that are suspiciously empty.   [CLANG_WARN_EMPTY_BODY, -Wempty-body]
GCC_WARN_FOUR_CHARACTER_CONSTANTS						= NO		// Warn about four-char literals (e.g., MacOS-style OSTypes: 'APPL').  [GCC_WARN_FOUR_CHARACTER_CONSTANTS, -Wfour-char-constants]
GCC_WARN_SHADOW											= YES		// Warn whenever a local variable shadows another local variable, parameter or global variable or whenever a built-in function is shadowed.  [GCC_WARN_SHADOW, -Wshadow]
CLANG_WARN_BOOL_CONVERSION								= YES		// Warn about implicit conversions to boolean values that are suspicious.  For example, writing 'if (foo)' with 'foo' being the name a function will trigger a warning.  [CLANG_WARN_BOOL_CONVERSION, -Wbool-conversion]
CLANG_WARN_CONSTANT_CONVERSION							= YES		// Warn about implicit conversions of constant values that cause the constant value to change, either through a loss of precision, or entirely in its meaning.  [CLANG_WARN_CONSTANT_CONVERSION, -Wconstant-conversion]
GCC_WARN_64_TO_32_BIT_CONVERSION						= NO		// Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.  This is a subset of the warnings provided by -Wconversion.  [GCC_WARN_64_TO_32_BIT_CONVERSION, -Wshorten-64-to-32]
CLANG_WARN_ENUM_CONVERSION								= YES		// Warn about implicit conversions between different kinds of enum values.  For example, this can catch issues when using the wrong enum flag as an argument to a function or method.  [CLANG_WARN_ENUM_CONVERSION, -Wenum-conversion]
CLANG_WARN_INT_CONVERSION								= YES		// Warn about implicit conversions between pointers and integers.  For example, this can catch issues when one incorrectly intermixes using NSNumber*'s and raw integers.  [CLANG_WARN_INT_CONVERSION, -Wint-conversion]
CLANG_WARN_IMPLICIT_SIGN_CONVERSION						= NO		// Warn about implicit integer conversions that change the signedness of an integer value.  [CLANG_WARN_IMPLICIT_SIGN_CONVERSION, -Wsign-conversion]
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED				= YES		// Warn if an aggregate or union initializer is not fully bracketed.
GCC_WARN_ABOUT_RETURN_TYPE								= YES_ERROR // Causes warnings to be emitted when a function with a defined return type (not void) contains a return statement without a return-value.  Also emits a warning when a function is defined without specifying a return type.  [GCC_WARN_ABOUT_RETURN_TYPE, -Wreturn-type]
GCC_WARN_MISSING_PARENTHESES							= YES		// Warn if parentheses are omitted in certain contexts, such as when there is an assignment in a context where a truth value is expected, or when operators are nested whose precedence people often get confused about.
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS				= NO		// Warn if a structure's initializer has some fields missing.  For example, the following code would cause such a warning, because "x.h" is implicitly zero:
GCC_WARN_ABOUT_MISSING_PROTOTYPES						= NO		// Causes warnings to be emitted about missing prototypes.  [GCC_WARN_ABOUT_MISSING_PROTOTYPES, -Wmissing-prototypes]
GCC_WARN_ABOUT_MISSING_NEWLINE							= YES		// Warn when a source file does not end with a newline.  [GCC_WARN_ABOUT_MISSING_NEWLINE, -Wnewline-eof]
GCC_WARN_ABOUT_POINTER_SIGNEDNESS						= YES		// Warn when pointers passed via arguments or assigned to a variable differ in sign.  [GCC_WARN_ABOUT_POINTER_SIGNEDNESS, -Wno-pointer-sign]
GCC_WARN_SIGN_COMPARE									= NO		// Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.  [GCC_WARN_SIGN_COMPARE, -Wsign-compare]
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION				= NO		// Warn about various implicit conversions that can lose information or are otherwise suspicious.  [CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION, -Wconversion]
GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS	= YES		// Enabling this option causes warnings about incompatible pointer types to be treated as errors.  [GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS, -Werror=incompatible-pointer-types]
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS		= YES		// Causes warnings about missing function prototypes to be treated as errors.  Only applies to C and Objective-C.  [GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS, -Werror-implicit-function-declaration]
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF						= YES		// Check calls to printf and scanf, etc., to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense.  [GCC_WARN_TYPECHECK_CALLS_TO_PRINTF, -Wno-format]
GCC_WARN_UNINITIALIZED_AUTOS							= YES		// Warn if a variable might be clobbered by a setjmp call or if an automatic variable is used without prior initialization.
GCC_WARN_UNKNOWN_PRAGMAS								= YES		// Warn when a #pragma directive is encountered which is not understood by GCC.  If this command line option is used, warnings will even be issued for unknown pragmas in system header files.  This is not the case if the warnings were only enabled by the -Wall command line option.  [GCC_WARN_UNKNOWN_PRAGMAS, -Wunknown-pragmas]
GCC_WARN_UNUSED_FUNCTION								= YES		// Warn whenever a static function is declared but not defined or a non-inline static function is unused.  [GCC_WARN_UNUSED_FUNCTION, -Wunused-function]
GCC_WARN_UNUSED_LABEL									= YES		// Warn whenever a label is declared but not used.  [GCC_WARN_UNUSED_LABEL, -Wunused-label]
GCC_WARN_UNUSED_PARAMETER								= NO		// Warn whenever a function parameter is unused aside from its declaration.  [GCC_WARN_UNUSED_PARAMETER, -Wunused-parameter]
GCC_WARN_UNUSED_VALUE									= YES		// Warn whenever a statement computes a result that is explicitly not used.  [GCC_WARN_UNUSED_VALUE, -Wunused-value]
GCC_WARN_UNUSED_VARIABLE								= YES		// Warn whenever a local variable or non-constant static variable is unused aside from its declaration.  [GCC_WARN_UNUSED_VARIABLE, -Wunused-variable]

// Objective-C
CLANG_WARN__DUPLICATE_METHOD_MATCH				= YES		// Warn about declaring the same method more than once within the same @interface.
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES		= NO		// Warn about @property declarations that are implicitly atomic.
CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS		= NO		// Starting in Xcode 4.4, the Apple LLVM Compiler will implicitly synthesize properties that are not explicitly synthesized using @synthesize.  This warning warns about such implicit behavior, even though the property is still synthesized.  This is essentially a backwards compatability warning, or for those who wish to continue to explicitly use @synthesize.
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL				= YES		// Warn if methods required by a protocol are not implemented in the class adopting it.  Only applies to Objective-C. [GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL, -Wno-protocol]
GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = NO		// Warn if multiple methods of different types for the same selector are found during compilation.  The check is performed on the list of methods in the final stage of compilation.  Additionally, a check is performed for each selector appearing in a "@selector(...)"  expression, and a corresponding method for that selector has been found during compilation.  Because these checks scan the method table only at the end of compilation, these warnings are not produced if the final stage of compilation is not reached, for example because an error is found during compilation, or because the -fsyntax-only option is being used. [GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR, -Wselector]
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS		= YES		// Warn if an Objective-C class either subclasses a deprecated class or overrides a method that has been marked deprecated.
GCC_WARN_STRICT_SELECTOR_MATCH					= NO		// Warn if multiple methods with differing argument and/or return types are found for a given selector when attempting to send a message using this selector to a receiver of type "id" or "Class".  When this setting is disabled, the compiler will omit such warnings if any differences found are confined to types which share the same size and alignment. [GCC_WARN_STRICT_SELECTOR_MATCH, -Wstrict-selector-match]
GCC_WARN_UNDECLARED_SELECTOR					= NO		// Warn if a "@selector(...)" expression referring to an undeclared selector is found.  A selector is considered undeclared if no method with that name has been declared before the "@selector(...)" expression, either explicitly in an @interface or @protocol declaration, or implicitly in an @implementation section.  This option always performs its checks as soon as a "@selector(...)" expression is found, while -Wselector only performs its checks in the final stage of compilation.  This also enforces the coding style convention that methods and selectors must be declared before being used. [GCC_WARN_UNDECLARED_SELECTOR, -Wundeclared-selector]
CLANG_WARN_OBJC_ROOT_CLASS						= YES_ERROR // Warn about classes that unintentionally do not subclass a root class (such as NSObject).  [CLANG_WARN_OBJC_ROOT_CLASS, -Wobjc-root-class]

// ARC
CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = NO	// Warn about implicit ownership types on Objective-C object references as out parameters.  For example, declaring a parameter with type 'NSObject**' will produce a warning because the compiler will assume that the out parameter's ownership type is '__autoreleasing'.  CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE, -Wexplicit-ownership-type]
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF	= YES	// Warn about implicit retains of 'self' within blocks, which can create a retain-cycle.  CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF, -Wimplicit-retain-self]
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK	= NO	// Warn about repeatedly using a weak reference without assigning the weak reference to a strong reference.  This is often symptomatic of a race condition where the weak reference can become nil between accesses, resulting in unexpected behavior.  Assigning to temporary strong reference ensures the object stays alive during the related accesses.  [CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK, -Warc-repeated-use-of-weak]
CLANG_WARN_OBJC_RECEIVER_WEAK			= NO	// Warn about sending messages to Objective-C pointers that are __weak.  This aids in avoiding situations (e.g., race conditions) when the last strong reference goes away and a client is messaging a __weak pointer that can suddenly (and unexpectedly) become nil.  [CLANG_WARN_OBJC_RECEIVER_WEAK, -Wreceiver-is-weak]
CLANG_WARN__ARC_BRIDGE_CAST_NONARC		= YES	// Warn about using __bridge casts when not using ARC (where they have no effect).
